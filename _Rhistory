training <- read.csv("input/pml-training.csv",header = TRUE,stringsAsFactors = FALSE)
head(training)
dim(training)
d.mean <- apply(training[-160],2,mean)
d.mean
d.mean <- apply(training[-160],2,mean,na.rm = TRUE)
?mean
?apply
d.mean <- apply(training[-160],2,FUN = mean,na.rm = TRUE)
d.mean
d.mean <- apply(training[,-160],2,FUN = mean,na.rm = TRUE)
d.mean
d.mean <- apply(training,2,FUN = mean,na.rm = TRUE)
d.mean
a <- mean(training$stddev_yaw_arm)
a
a <- mean(training$stddev_yaw_arm,na.rm = TRUE)
a
d.means <- colMeans(training[,-160],na.rm = TRUE)
a <- training[,-160]
dim(a)
?colMeans
d.mean <- apply(training,2,mean,na.rm = TRUE)
warnings()
str(training)
d.melt <- melt(training,id.vars = c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window"))
library(reshape2)
d.melt <- melt(training,id.vars = c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window"))
ggplot(d.melt,aes(x = value)) + facet_wrap(~variable,scales = "free_x") + geom_histogram()
library(ggplot2)
ggplot(d.melt,aes(x = value)) + facet_wrap(~variable,scales = "free_x") + geom_histogram()
ggplot(d.melt,aes(x = value)) + facet_wrap(~variable,scales = "free_x") + geom_histogram(stat = "count")
ggplot(d.melt,aes(x = value)) + facet_wrap(~variable,scales = "free_x") + geom_histogram(stat = "count")
head(d.melt)
ggplot(d.melt,aes(x = value)) + facet_wrap(~variable) + geom_histogram(stat = "count")
ggplot(d.melt,aes(x = value)) + facet_wrap(~variable) + geom_histogram()
dim(d.melt)
d.melt <- melt(training[,-160],id.vars = c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window"))
ggplot(d.melt,aes(x = value)) + facet_wrap(~variable) + geom_histogram()
str(training)
training.temp <- training[,is.numeric(training)]
dim(training.temp)
training.temp <- training[,!apply(training,2,is.character)]
dim(training.temp)
training.temp <- training[,apply(training,2,is.character)]
dim(training.temp)
apply(training,2,is.character)
apply(training,2,is.numeric)
num.col <- sapply(training,is.numeric)
num.col
num.col <- sapply(training,is.numeric)
training.temp <- training[,num.col]
head(training.temp)
d.melt <- melt(training.temp,id.vars = c("X","raw_timestamp_part_1","raw_timestamp_part_2","new_window","num_window"))
d.melt <- melt(training.temp,id.vars = c("X","raw_timestamp_part_1","raw_timestamp_part_2"))
head(d.melt)
ggplot(d.melt,aes(x = value)) + facet_wrap(~variable) + geom_histogram()
ggplot(d.melt,aes(x = value)) + facet_wrap(~variable,scales = "free_x") + geom_histogram()
ggplot(d.melt,aes(x = value)) + facet_wrap(~variable,scales = "free_x") + geom_histogram()
library(reshape2)
library(ggplot2)
library(caret)
library(plyr)
library(dplyr)
library(GGally)
# Load Data ---------------------------------------------------------------
# read training data
training <- read.csv("input/pml-training.csv",
header = TRUE,
stringsAsFactors = FALSE,
na.strings = c("NA","#DIV/0!"))
# Exploratory Analysis ----------------------------------------------------
# plot distribution of each predictor
# should you split the data by exercise? (same exercise was used: Unilateral Dumbbell Biceps Curl)  by subject? (no)
#d.mean <- apply(training,2,mean,na.rm = TRUE)
#d.means <- colMeans(training[,-160],na.rm = TRUE)
num.col <- data.frame(sapply(training,is.numeric))
names(num.col) <- "is.numeric.data"
names.change.num <- c("X",
"raw_timestamp_part_1",
"raw_timestamp_part_2",
"new_window",
"num_window",
"classe")
num.col[names.change.num,] <- FALSE
names.data <- rownames(num.col)[num.col$is.numeric.data == TRUE]
names.id.data <- rownames(num.col)[num.col$is.numeric.data == FALSE]
# remove columns with little variation
nsv <- nearZeroVar(training[names.data],saveMetrics = TRUE)
zero.var <- rownames(nsv)[nsv$zeroVar == TRUE]
near.zero.var <- rownames(nsv)[nsv$nzv == TRUE]
names.data.use <- names.data[!(names.data %in% near.zero.var)]
# retaining means and sd for later use
training.mean <- sapply(training[names.data.use],mean,na.rm = TRUE)
training.sd <- sapply(training[names.data.use],sd,na.rm = TRUE)
# centering the data
preObj <- preProcess(training[names.data.use],method = c("center","scale"))
training.centered <- predict(preObj,training[names.data.use])
training.centered <- cbind(training[names.id.data],training.centered)
g.correl <- ggplot(data = cor(training.centered[rownames(correlated.predictors)])
data.correl <- cor(training.centered[rownames(correlated.predictors)])
M <- abs(cor(training.centered[names.data.use]))
diag(M) <- 0
correlated.predictors <- which(M > 0.9,arr.ind = TRUE)
nrow(correlated.predictors)
data.correl <- cor(training.centered[rownames(correlated.predictors)])
data.correl
training <- read.csv("input/pml-training.csv",
header = TRUE,
stringsAsFactors = FALSE,
na.strings = c("NA","#DIV/0!"))
# Exploratory Analysis ----------------------------------------------------
# plot distribution of each predictor
# should you split the data by exercise? (same exercise was used: Unilateral Dumbbell Biceps Curl)  by subject? (no)
#d.mean <- apply(training,2,mean,na.rm = TRUE)
#d.means <- colMeans(training[,-160],na.rm = TRUE)
num.col <- data.frame(sapply(training,is.numeric))
names(num.col) <- "is.numeric.data"
names.change.num <- c("X",
"raw_timestamp_part_1",
"raw_timestamp_part_2",
"new_window",
"num_window",
"classe")
num.col[names.change.num,] <- FALSE
names.data <- rownames(num.col)[num.col$is.numeric.data == TRUE]
names.id.data <- rownames(num.col)[num.col$is.numeric.data == FALSE]
# remove columns with little variation
nsv <- nearZeroVar(training[names.data],saveMetrics = TRUE)
zero.var <- rownames(nsv)[nsv$zeroVar == TRUE]
near.zero.var <- rownames(nsv)[nsv$nzv == TRUE]
names.data.use <- names.data[!(names.data %in% near.zero.var)]
# retaining means and sd for later use
training.mean <- sapply(training[names.data.use],mean,na.rm = TRUE)
training.sd <- sapply(training[names.data.use],sd,na.rm = TRUE)
# centering the data
preObj <- preProcess(training[names.data.use],method = c("center","scale"))
training.centered <- predict(preObj,training[names.data.use])
training.centered <- cbind(training[names.id.data],training.centered)
names(training.centered)
rownames(correlated.predictors)
data.correl <- cor(training.centered[rownames(correlated.predictors),])
data.correl <- cor(training.centered[,rownames(correlated.predictors)])
data.correl
names(data.correl)
data.correl <- data.frame(cor(training.centered[,rownames(correlated.predictors)]))
names(data.correl)
correlated.predictors
data.correl <- data.frame(cor(training.centered[,unique(rownames(correlated.predictors))]))
data.correl
data.correl
pairs(training.centered[,unique(rownames(correlated.predictors))])
pairs(formula = cor,data = training.centered[,unique(rownames(correlated.predictors))])
pairs(formula = cor,x = training.centered[,unique(rownames(correlated.predictors))])
data.correl <- data.frame(cor(training.centered[,unique(rownames(correlated.predictors))]))
data.correl
plot(data.correl)
qplot(data.correl)
?qplot
data.correl2 <- melt(data.correl)
data.correl2
data.correl$var1 <- rownames(data.correl)
data.correl2 <- melt(data.correl,id.vars = "var1",variable.name = "var2",value.name = "correlation")
data.correl2
ggplot(data = data.correl,aes(x = "var1",y = "var2")) + geom_point(aes(y = "correlation"))
ggplot(data = data.correl,aes(x = var1,y = var2)) + geom_point(aes(y = correlation))
data.correl
data.correl <- data.frame(cor(training.centered[,unique(rownames(correlated.predictors))]))
data.correl$var1 <- rownames(data.correl)
data.correl <- melt(data.correl,id.vars = "var1",variable.name = "var2",value.name = "correlation")
g.correl <- ggplot(data = data.correl,aes(x = var1,y = var2)) + geom_point(aes(y = correlation))
g.correl
data.correl
g.correl <- ggplot(data = data.correl,aes(x = var1,y = correlation)) + geom_point() +
scale_y_discrete(labels = var2)
g.correl <- ggplot(data = data.correl,aes(x = var1,y = correlation)) + geom_point() +
scale_y_discrete(labels = data.correl$var2)
g.correl
ggplot(data = data.correl,aes(x = var1,y = var2,size = correlation)) + geom_point()
g.correl <- ggplot(data = data.correl,aes(x = var1,y = var2,size = abs(correlation),color = correlation)) + geom_point() +
g.correl <- ggplot(data = data.correl,aes(x = var1,y = var2,size = abs(correlation),color = correlation)) + geom_point()
ggplot(data = data.correl,
aes(x = var1,y = var2,size = abs(correlation),
color = correlation)) +
geom_point()
g.correl <- ggplot(data = data.correl,
aes(x = var1,y = var2,size = abs(correlation),
color = correlation)) +
geom_point() +
theme(axis.text.x = element_text(angle = 90,hjust = 0))
g.correl
preProc <- preProcess(training.centered[,names.data.use], method = "pca")
preProc
str(preProc)
preProc$numComp
View(preProc)
?predict
training.centered.pca <- predict(preProc,training.centered[,names.data.use])
